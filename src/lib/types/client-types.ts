
import { z } from 'zod';

// Zod schema for ClientPlan, used for validation within the Client schema
export const ClientPlanSchema = z.object({
  planId: z.string(),
  // Dates from the database may be strings, so we coerce them.
  planActivationDate: z.coerce.date(),
});
export type ClientPlan = z.infer<typeof ClientPlanSchema>;

// Zod schema for a Client, ensuring data consistency.
export const ClientSchema = z.object({
  id: z.string(),
  name: z.string(),
  taxId: z.string().nullable().optional(),
  contactName: z.string().nullable().optional(),
  email: z.string().email().nullable().optional(),
  phone: z.string().nullable().optional(),
  whatsapp: z.string().nullable().optional(),
  notes: z.string().nullable().optional(),
  status: z.enum(["Ativo", "Inativo"]),
  plans: z.array(ClientPlanSchema).nullable().optional(),
  // Dates from the database may be strings, so we coerce them.
  createdAt: z.coerce.date(),
});
export type Client = z.infer<typeof ClientSchema>;

// Input schema for adding a client (omits fields generated by the server like 'id' and 'createdAt')
export const AddClientInputSchema = ClientSchema.omit({ id: true, createdAt: true });
export type AddClientInput = z.infer<typeof AddClientInputSchema>;

// Input schema for updating a client (requires 'clientId' and makes all other fields optional)
export const UpdateClientInputSchema = z.object({
    clientId: z.string(),
    updates: ClientSchema.omit({ id: true, createdAt: true }).partial(),
});
export type UpdateClientInput = z.infer<typeof UpdateClientInputSchema>;
