
import { z } from 'zod';

// Blocknote uses a JSON structure to represent content. We'll allow any JSON object for flexibility.
const BlockSchema = z.record(z.any());

// Zod schema for a KnowledgeBase Article, ensuring data consistency.
export const KnowledgeBaseArticleSchema = z.object({
  id: z.string(),
  title: z.string(),
  // content can be any valid JSON object from the editor
  content: z.array(BlockSchema).nullable().optional(), 
  // metadata will also be a flexible JSON object
  metadata: z.record(z.any()).nullable().optional(),
  authorId: z.string().nullable().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});
export type KnowledgeBaseArticle = z.infer<typeof KnowledgeBaseArticleSchema>;

// Input schema for adding an article (omits fields generated by the server)
export const AddArticleInputSchema = KnowledgeBaseArticleSchema.omit({ 
    id: true, 
    createdAt: true, 
    updatedAt: true 
});
export type AddArticleInput = z.infer<typeof AddArticleInputSchema>;


// Input schema for updating an article
export const UpdateArticleInputSchema = z.object({
    articleId: z.string(),
    updates: KnowledgeBaseArticleSchema.omit({ 
        id: true, 
        createdAt: true, 
        updatedAt: true,
        authorId: true, // authorId should not be updatable
    }).partial(),
});
export type UpdateArticleInput = z.infer<typeof UpdateArticleInputSchema>;
